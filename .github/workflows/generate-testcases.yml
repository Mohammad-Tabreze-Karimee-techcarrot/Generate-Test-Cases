name: Two-Stage AI Test Case Generation

on:
  push:
    paths:
      - 'projects/**/input/BRD/*.docx'
      - 'projects/**/input/BRD/*.pdf'
      - 'projects/**/input/Figma/*.pdf'
      - 'generate_testcases.py'
      - '.github/workflows/testcase-generation.yml'
  workflow_dispatch:
    inputs:
      clear_cache:
        description: 'Clear cache before running'
        required: false
        type: boolean
        default: false

permissions:
  contents: write

jobs:
  generate:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Clean pip cache
        run: |
          pip cache purge || true
          pip list | grep -E "anthropic|openai|httpx|httpcore" || echo "No conflicts found"

      - name: Install dependencies with fixed versions
        run: |
          pip install --upgrade pip setuptools wheel
          
          # Install in specific order to avoid conflicts
          pip install httpx==0.24.1
          pip install httpcore==0.17.3
          
          # Install AI SDKs
          pip install anthropic==0.28.0
          pip install openai==1.54.0
          
          # Install document processing
          pip install python-docx==1.1.0
          pip install PyMuPDF==1.23.8
          pip install python-dotenv==1.0.1
          
          echo "✅ All dependencies installed successfully"

      - name: Verify installations
        run: |
          echo "Verifying Python imports..."
          python -c "import anthropic; print('✅ Anthropic version:', anthropic.__version__)" || exit 1
          python -c "import openai; print('✅ OpenAI version:', openai.__version__)" || exit 1
          python -c "import fitz; print('✅ PyMuPDF installed')" || exit 1
          python -c "import docx; print('✅ python-docx installed')" || exit 1
          python -c "from dotenv import load_dotenv; print('✅ python-dotenv installed')" || exit 1
          echo "✅ All imports verified"

      - name: Clear cache if requested
        if: github.event.inputs.clear_cache == 'true'
        run: |
          echo "Clearing cache..."
          find projects -type d -name "cache" -exec rm -rf {} + 2>/dev/null || true
          echo "✅ Cache cleared"

      - name: Create required directories
        run: |
          mkdir -p projects
          find projects -type d -name "input" -exec mkdir -p {}/BRD {}/Figma \; 2>/dev/null || true
          echo "✅ Directory structure ready"

      - name: Generate test cases (Two-Stage AI)
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "Starting test case generation..."
          echo "Started at: $(date)"
          
          python generate_testcases.py
          EXIT_CODE=$?
          
          echo "Finished at: $(date)"
          
          if [ $EXIT_CODE -ne 0 ]; then
            echo "Test case generation failed with exit code: $EXIT_CODE"
            exit $EXIT_CODE
          fi
          
          echo "✅ Test case generation completed successfully"

      - name: Upload logs as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: generation-logs
          path: testcase_generation.log
          retention-days: 30

      - name: Check for changes
        id: check_changes
        run: |
          git add projects/*/output/**/*.md 2>/dev/null || true
          
          if git diff --staged --quiet; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No new changes to commit"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "✅ Changes detected and staged"
          fi

      - name: Commit and push generated files
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action Bot"
          
          ANALYSIS_COUNT=$(git diff --staged --name-only | grep "analysis" | wc -l)
          TESTCASE_COUNT=$(git diff --staged --name-only | grep "testcases" | wc -l)
          
          git commit -m "🤖 Two-Stage AI: Generated test cases

          📊 Analysis files: $ANALYSIS_COUNT
          ✅ Test case files: $TESTCASE_COUNT
          ⏰ Generated: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
          
          [skip ci]"
          
          git push

      - name: Generate summary report
        if: always()
        run: |
          echo "# Test Case Generation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Generated at: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          ANALYSIS_COUNT=$(find projects -path "*/output/analysis/*.md" 2>/dev/null | wc -l)
          TESTCASE_COUNT=$(find projects -path "*/output/testcases/*.md" 2>/dev/null | wc -l)
          
          echo "## Results" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 Analysis files: $ANALYSIS_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Test case files: $TESTCASE_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Processed Projects" >> $GITHUB_STEP_SUMMARY
          for project in projects/*/; do
            if [ -d "$project/output/testcases" ]; then
              PROJECT_NAME=$(basename "$project")
              MODULE_COUNT=$(find "$project/output/testcases" -name "*.md" 2>/dev/null | wc -l)
              if [ $MODULE_COUNT -gt 0 ]; then
                echo "- **$PROJECT_NAME**: $MODULE_COUNT module(s)" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Recent Logs" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          tail -n 15 testcase_generation.log 2>/dev/null >> $GITHUB_STEP_SUMMARY || echo "No logs available" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Notify on success
        if: success()
        run: |
          echo "✅ Workflow completed successfully!" >> $GITHUB_STEP_SUMMARY

      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Workflow failed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Troubleshooting" >> $GITHUB_STEP_SUMMARY
          echo "1. Check API keys in repository secrets" >> $GITHUB_STEP_SUMMARY
          echo "2. Review the generation logs artifact" >> $GITHUB_STEP_SUMMARY
          echo "3. Verify BRD files are in correct directories" >> $GITHUB_STEP_SUMMARY
          echo "4. Check for rate limit errors" >> $GITHUB_STEP_SUMMARY