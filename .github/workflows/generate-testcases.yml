name: Two-Stage AI Test Case Generation

on:
  push:
    paths:
      - 'projects/**/input/BRD/*.docx'
      - 'projects/**/input/BRD/*.pdf'
      - 'projects/**/input/Figma/*.pdf'
      - 'generate_testcases.py'
  workflow_dispatch:
    inputs:
      clear_cache:
        description: 'Clear cache before running'
        required: false
        type: boolean
        default: false

permissions:
  contents: write

jobs:
  generate:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          # REMOVE cache to force fresh install

      - name: Clear pip cache
        run: |
          pip cache purge || true
          echo "✅ Pip cache cleared"

      - name: Install dependencies (force specific versions)
        run: |
          echo "📦 Installing Python dependencies..."
          pip install --upgrade pip setuptools wheel
          
          # Force remove any existing versions
          pip uninstall -y anthropic openai python-docx PyMuPDF python-dotenv 2>/dev/null || true
          
          # Install exact versions
          pip install --no-cache-dir anthropic==0.18.1
          pip install --no-cache-dir openai==1.12.0
          pip install --no-cache-dir python-docx==1.1.0
          pip install --no-cache-dir python-dotenv==1.0.1
          pip install --no-cache-dir PyMuPDF==1.23.26
          
          echo ""
          echo "✅ Installation complete. Verifying versions:"
          echo "================================================"
          pip show anthropic | grep -E "Name|Version"
          pip show openai | grep -E "Name|Version"
          pip show python-docx | grep -E "Name|Version"
          pip show PyMuPDF | grep -E "Name|Version"
          echo "================================================"

      - name: Verify installations
        run: |
          echo "🔍 Verifying Python imports..."
          python -c "import fitz; print('✅ PyMuPDF')"
          python -c "import anthropic; print(f'✅ Anthropic v{anthropic.__version__}')"
          python -c "import openai; print(f'✅ OpenAI v{openai.__version__}')"
          python -c "import docx; print('✅ python-docx')"
          python -c "import dotenv; print('✅ python-dotenv')"
          echo "✅ All imports successful"

      - name: Generate test cases
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo "🚀 Starting test case generation..."
          echo "⏰ Started at: $(date)"
          
          python generate_testcases.py
          
          EXIT_CODE=$?
          echo "⏰ Finished at: $(date)"
          
          if [ $EXIT_CODE -ne 0 ]; then
            echo "❌ Test case generation failed"
            exit $EXIT_CODE
          fi
          
          echo "✅ Completed successfully"

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: generation-logs
          path: testcase_generation.log
          retention-days: 30

      - name: Commit generated files
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git add projects/*/output/**/*.md 2>/dev/null || true
          
          if git diff --staged --quiet; then
            echo "ℹ️ No changes to commit"
          else
            git commit -m "🤖 Generated test cases [skip ci]"
            git push
          fi